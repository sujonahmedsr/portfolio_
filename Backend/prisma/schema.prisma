generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================
// ENUMS
// ==========================
enum Role {
  ADMIN
}

// ==========================
// MODELS
// ==========================

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  role       Role     @default(ADMIN)
  is_deleted Boolean  @default(false)
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  blogs      Blog[]
  projects   Project[]
  skills     Skill[]
  experiences Experience[]

  @@map("users")
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  content     String
  image_url   String?
  is_published Boolean  @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  is_deleted  Boolean  @default(false)

  author_id   String
  author      User     @relation(fields: [author_id], references: [id])

  @@map("blogs")
}

model Project {
  id          String   @id @default(uuid())
  title       String
  description String
  live_link   String?
  github_link String?
  tech_stack  String[] // e.g., ["React", "Node.js"]
  image_url   String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  is_deleted  Boolean  @default(false)

  user_id     String
  user        User     @relation(fields: [user_id], references: [id])

  @@map("projects")
}

model Skill {
  id        String   @id @default(uuid())
  name      String
  level     String   // e.g., Beginner, Intermediate, Expert
  category  String   // e.g., Frontend, Backend, Tools
  image_url String?
  created_at DateTime @default(now())
  is_deleted  Boolean  @default(false)

  user_id   String
  user      User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, name])
  @@map("skills")
}

model Experience {
  id          String   @id @default(uuid())
  title       String   // e.g., Frontend Developer
  company     String
  location    String
  start_date  DateTime
  end_date    DateTime?
  description String?
  created_at  DateTime @default(now())
  is_deleted  Boolean  @default(false)

  user_id     String
  user        User     @relation(fields: [user_id], references: [id])

  @@map("experiences")
}
